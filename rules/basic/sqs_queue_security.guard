#
# Sample guard policy to ensure no SQS queues exist without encryption
#
# Select from Resources section of the template all SQS resources 
#
let sqs_queues = Resources.*[ Type == 'AWS::SQS::Queue' ]

rule sqs_queues_use_default_encryption when %sqs_queues !empty {
    %sqs_queues {
        Properties.KmsMasterKeyId == "alias/aws/sqs"
    }
}

let sqs_policies = Resources.*[ Type == 'AWS::SQS::QueuePolicy' ]

rule sqs_queue_policy_exists when %sqs_policies !empty {
    %sqs_policies {
        Properties.PolicyDocument !empty
    }
}

rule sqs_queue_policy_required when %sqs_queues !empty {
    sqs_queue_policy_exists
}

let invalid_principals = ["*", ""]

rule sqs_queue_policy_not_permitting_global_access when %sqs_policies !empty {
    %sqs_policies {
       some Properties.PolicyDocument.Statement[*] {
            Principal not in %invalid_principals
            Effect == "Allow"
        }
    }
}

rule sqs_queue_policy_only_permit_messages_from_vpc when %sqs_policies !empty {
    %sqs_policies {
       some Properties.PolicyDocument.Statement[*] {
            Effect == "Deny"
            Condition.*[ keys == /aws:[sS]ource(Vpc|VPC|Vpce|VPCE)/ ] !empty
            Condition.StringNotEquals !empty
        }
    }
}
